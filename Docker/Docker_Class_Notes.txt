Docker Certification Programme 
6th May 2023

#################
6th May. - Day 1
#################


	Jenkins ==> 		
		CI/CD
		Master Slave 

	Application Build and Deployment :::

	Application :

		- Monolith Application Architecture
			Tightly coupled.
			Modularity is not here.

		- Micorservice based Application Architecture

			Appln.
				Splitted into various Modules/micro-services

	Web-Application
	Desktop Application
	Mobile Application

	Web-Application:
		E-Commerce - portal
		facebook, Netflix


	In Micorservice based Application Architecture ::

	Facebook Application:

	Sign-up
	Sign-In
	Search
	Post

	E-Commerce Application:

	Sign-up
	Sign-In		==> develop -- test -- deliver/deploy this service
	Search
	Add to cart
	Place order
	Payment
	Track

	To effectively deploy Microservice based Applications we use Containers


	Jenkins ==> 		
		CI/CD
		Master Slave 


	Development perspective ::

	Devloper1:

	Sign-In 		signin.java
		- Code
		- Managed in Source Code Repo. (Github)
		- build	- It is a process of compile the Source Code & Create Artifacts(binaries)
			Using Maven build tools --> *.war / *.jar file / *.dll / *.exec

		- Deployed to Test Environments
			QA 
			UAT
			Pre-Prod / Staging 

		- Deployed to Prod Environments


	Devloper2:

	Payment 		payment.java
		- Code
		- Managed in Source Code Repo. (Github)
		- build	- It is a process of compile the Source Code & Create Artifacts(binaries)
			Using Maven build tools --> *.war / *.jar file / *.dll / *.exec

		- Deployed to Test Environments
			QA 
			UAT
			Pre-Prod / Staging 

		- Deployed to Prod Environments


	CI - > Continuous Integration 
	CD - > 
		Continuous Delivery 	==> Required Manual Approval for Prod Release 
		/ Deployment  		==> Completely automated Prod Release - No Manual Approval need for prod release. 



	CI/CD Pipeline Workflow :::


	Pipeline : Stages
	Stage1 : 
		SCM-Checkout 
	Stage2 : 
		Application Build
	Stage3 : 
		Automated Unit Testing
	Stage4 : 
		Deploy to QA Environment
	Stage5 : 
		Perform QA Testing
	Stage6 : 
		Deploy to UAT Environment
	Stage7 : 
		Perform UAT Testing

	Stage8 : 
		Deploy to PROD Environment


	Environments::

	Non-Prod Envi.					Prod Envi.
		DEV
		TEST
		  QA
		  UAT			==> 		Prod.

	Banking/FIN/INS Domain

		Security 
		Infra
		Testing
		Release Management Team
		BU

	Facebook / Google / Netflix / amazon.com

		Conti. Deployment 


Challenges faced in Microservice based applications without Containers :::

	Developer2:

	Payment 		payment.java
		- Code
		- Managed in Source Code Repo. (Github)

		- build	- It is a process of compile the Source Code & Create Artifacts(binaries)
			Using Maven build tools --> *.war_v1.0 / *.jar file / *.dll / *.exec

			Unit Testing					*.war_v1.0
			Application Server like Tomcat / Nginx
					jdk1.7 , tomcat 9

			Using Container Images ==> Package the *.war file along with its dependencies

				Image ==> (*.war_v1.0,jdk1.7,tomcat9) == payment_app_img_cr1

		- Deployed to Test Environments
			QA 		payment_app_img_cr1 -- Run/test this appln. using container
			UAT		payment_app_img_cr1
			Pre-Prod / Staging  payment_app_img_cr1

		- Deployed to Prod Environments payment_app_img_cr1


	Virtual Machines :::


	On Infra-structure perspective we can use Containers
		
	Virtual Machines :::

		Jenkins Master Slave Architecture :::
	
	Non-Prod Environment :::
	
	Virtual Machines
		Jenkins Master 
			Slave1 		==>	Java Application
			Slave1.1 	==>	Java Application
			Slave2 		==>	Python Application
			Slave3 		==>	Angular/Node Application

	Using Containers we can reduce the no. of VMs	

	Virtual Machines
		Jenkins Master(VM)
			Slave_BuildServer(VM) --> VM Computing Device --> EBS 
				Install Docker Container Engine 
					Create any no. of Containers
						Container1 --> Java Application Image ==> (*.war_v1.0,jdk1.7,tomcat9)
						Container2 --> Python Application
						Container3 --> Angular Application


			Slave1 		==>	Java Application (*.war_v1.0,jdk1.7,tomcat9) 120MB
			Slave1.1 	==>	Java Application
			Slave2 		==>	Python Application
			Slave3 		==>	Angular/Node Application

		Jenkins Master(VM)
			Slave_BuildServer1(VM) --> VM Computing Device --> EBS 
				Install Docker Container Engine 
					Create any no. of Containers
						Container1 --> Java Application Image ==> (*.war_v1.0,jdk1.7,tomcat9)
						Container2 --> Python Application
						Container3 --> Angular Application

Ansible contoller ::
	Slave_BuildServer1(VM)
	Slave_BuildServer2(VM)


			Slave_BuildServer1(VM) --> VM Computing Device --> EBS 
				Install Docker Container Engine 
					Create any no. of Containers
						Container1.0 --> Java Application Image ==> (*.war_v1.0,jdk1.7,tomcat10)
						Container1.1 --> Java Application Image ==> (*.war_v2.0,jdk1.8,tomcat9)
						Container1.2 --> Java Application Image ==> (*.war_v3.0,jdk1.6,tomcat8.5)
						Container1.3 --> Java Application Image ==> (*.war_v4.0,jdk1.8,tomcat8)
						Container2 --> Python Application
						Container3 --> Angular Application


Dynamically Create the servers using Terraform & Config using Ansible :

Ansible contoller ::
	Slave_BuildServer1(VM)
	Slave_BuildServer2(VM)

	Virtual Machine :::: use the Hardware level virtualization

		Windows OS - 16GB RAM 2 CPUs

		Virtual Machine for Linux OS
			On-premises
			Cloud 

	Containers :::: Use the OS level Virtualization


Lab & Demo ::
	
	AWS Platform 

		AWS EC2 Instances
			Install docker		


free - tier account in AWS - > 

github account??


Pre-requisites for Demo / Practise :::


	AWS Cloud Provider
	Github 
	Dockerhub account 


Next ::::
	How to Install Docker 
	Work on docker Register - Dockerhub
	Docker CLI Commands.

	MobaXterm / putty == SSH Client ??
	Linux -- RHEL / Centos 



	Class / Instructor rating

	1	Execellent
	0	Good 
	-1	Avg/bad



#################
7th May. - Day 2
#################

	- Docker Terminologies
	- Docker Installation & Startup
	- Docker CLI Commands
	- Working with Dockerhub and Images
	- Working with Containers

	https://mobaxterm.mobatek.net/download.html

	https://docs.docker.com/engine/install/centos/

	https://hub.docker.com/


	Image ==> Static package of application -(*.war,dependencies) - (*.war_v1.0,jdk1.7,tomcat9) - mywebappimg1

		To Create Image :::
 		 docker Commit
		 docker build		Dockerfile 

	Containers ==> Containers are called as executable units of Images


	Container ::: 

		Applications :
			Stateless 	--> 
			Stateful	--> logs,report,manifest contents

	Container Volume :: 

	Docker Registry :: store and manage the container Images --> www.dockerhub.com		
		Repository --> 

	AWS - ECS - ECR - EKS
	Az - 


	Microservice :

	User_Registration ::

		front-end		c1
		business-logic		c2
		backend(database)	c3

	docker Compose 
		manifest file

	Container Orchestion Tool:
		swarm  		-- Docker container
		Kubernetes	-- Any container Orchestration


	SSH Client to access remote servers ::
		MobaXterm	
		Putty	
	

	docker hub ==> 



	DevOps Team ::


	Build_Server --> VM
		Javaweb_appln. ===> git,jdk,maven

		Container.
			use centos image ==> install git,jdk,maven

		Create new image out of this - java_app_build_image -- (Centos,git,jdk,maven)
	
	Application_Server --> VM

	
		jdk,tomcat --> 
			<public_ip_of_VM>:8080
			
	

		Container.
			use centos image ==> install jdk,tomcat

		Create new image out of this - java_app_tomcat_server_image -- (Centos,jdk,tomcat)

		docker commit 



	images
	containers
	volumes...

	docker pull
	
	docker run 

	run container ::: 


		background mode	- Detached mode

		***foreground mode	- attached mode
		
		Interative Mode - 


	docker inspect
	docker history 
	docker run -it | -d 
	docker rm 
	docker rmi

	tomcat ==> port 8080

	Port Binding / port Mapping

		host_port:container_Port
		-p 8085:8080
		<public_ip_of_VM>:8085

		docker run -it -p 8085:8080 tomcat:8.0

		-p host_port:container_port


	docker run -it <image_name> bash	==> Start the Containers using Image name

	docker exec -it <container_id> bash	==> Login to the running container using Container_ID
		


	Build_Server --> perfrom appln. build ==> artifacts *.war
		app_image(tomcat)/usr/local/tomcat/webapps/*.war


	VM							VM - QA_Server (Tomcat) 
	Jenkins_Master
	 Slave1 ==> build & Create artifacts			/opt/tomcat/webapps/*.war

	targets/*.war


    1  yum update -y
    2  clear
    3  yum install docker -y
    4  clear
    5  docker --version
    6  docker version
    7  systemctl start docker
    8  systemctl status docker
    9  systemctl enable docker
   10  history
   11  clear
   12  docker --version
   13  docker images
   14  docker ps
   15  docker ps -a
   16  docker pull centos
   17  docker images
   18  docker ps
   19  docker ps -a
   20  docker run centos
   21  docker ps
   22  docker ps -a
   23  docker run centos
   24  docker ps -a
   25  clear
   26  docker ps -a
   27  docker run centos
   28  docker ps -a
   29  docker images
   30  docker run ubuntu
   31  docker ps -a
   32  clear
   33  docker images
   34  docker run -d centos
   35  docker ps
   36  docker run -d centos sleep 20
   37  docker ps
   38  docker ps -a
   39  clear
   40  docker run centos sleep 20
   41  docker ps -a
   42  clear
   43  docker run centos sleep 30
   44  clear
   45  docker images
   46  docker run -it centos bash
   47  clear
   48  docker run centos sleep 10
   49  docker images
   50  docker ps -a
   51  docker rmi 3b418d7b466a
   52  docker rm c2e57b
   53  docker rmi 3b418d7b466a
   54  docker images
   55  clear
   56  docker ps -a
   57  docker rm 1247b 2c8c18
   58  clear
   59  docker run centos sleep 50
   60  clear
   61  docker run -it -p 8085:8080 tomcat:8.0
   62  history



    1  clear
    2  docker ps
    3  clear
    4  docker ps
    5  docker run centos
    6  docker ps -a
    7  docker p
    8  docker ps
    9  clear
   10  docker ps
   11  docker stop 20033ccdc750
   12  docker ps -a
   13  docker images
   14  docker history 5d0da3dc9764
   15  docker inspect 20033ccdc750
   16  docker inspect centos
   17  clear
   18  docker ps
   19  docker run -it -p 8080:8080 tomcat:8.0
   20  history



##################
13th May. - Day 3
##################

		Docker Fundamentals

			Docker Volumes
			Create Docker Images	
			Docker Registry (dockerhub)
			How to access dockerhub from docker cli
			How to push images from local machine to docker hub registry

			Actual Application -- Java Web application 
			
		Docker Volumes :::

		Application :::
			
			Appln. ==> produce --> log --> input to another container

			appli. monitoring tool --> server --> generate reports --> cont1


		Containers were introduced only for stateless application. 

		volumes -- stateful applications  --> appln. that leaves come trace of executions(logs,report)


		Container1 --> Appln. ===> Container volume

		Docker Volumes == used to create persistant volume for containers.

		docker volume command to create container volumes.

		docker run -it --mount source=edutestvol1,destination=/edutestvol1 centos bash


		Host Machine ::: volume -- dir1

		Container ::: 


		Application - java webapp ==> Container ==> secret file 
		file - - host 

		Java_proj
			src
				main
				test
			target
			app.properties

		Using Container Volumes ::

			appln. artifacts ==> /target/*.war
		cp target/*.war /var/lib/docker/volumes/v1/_data

		

		Create Docker Images :::


		centos Image ==> base image 
		

		docker commit 	

			centos Image ==> base image 
			1. centos 
			2. 
			
		Create Jenkins Slave Machine ::: (appln. build)
			Java maven application
				git,jdk,maven

				maven
				jdk
				git
				centos

		docker commit ==> Is used to create a image based on the container.



		docker commit <Container_ID> <Image_Name>:<tag>

		docker commit 8e7118c4949d loksaieta/mydebian-bs-git:v1.0
		docker run -it loksaieta/mydebian-bs-git:v1.0		

		docker build 
			VM --> ami image 

		login ==> yum update -y
			Images ==> Application / Server Templates

			Docker -- IAC -->

		 
		docker build == > used to create appln. 
				 need to create Dockerfile 


		1. Create Dockerfile

FROM debian
RUN apt-get update
RUN apt-get install git -y



		Best Practises :::: Image build ::: 
		
FROM debian
RUN apt-get update && apt-get install git -y	

		docker build ==> Dockerfile	

		Source code repo.	


	


		Image ::: ==> package -- non-executable -- portable 

		Common platform to store and manage the images
		 Container Registry ==> Dockerhub 
		

		Access Dockerhub using Docker CLI ==> 

					API

		Authentication is required to access the dockerhub repos.

		docker login -u loksaieta

		docker push loksaieta/edu-deb-git1
		password : dckrdaddvpat_x-4BPZN1k-nDQbZq_Te3P8cx6GE


		Docker workflow ::::


		CI/CD Process :::
		
		Typical CI/CD --> How Many servers are needed ???

		Build and Deploy a web application(maven) 

				
		CI/CD :::

		Continuous Development --- CI -- CD/Deployment -- CT -- CM

		Non-Prod							Prod
		Dev-Environment
		Build-Environment
		Test
		  QA 
		  UAT 								Prod Environment 


		CI/CD -- Pipeline :::

		Stages ::::

		BUILD,TEST,PACKAGE,CODE_REVIEW,DEPLOY,MONITORING
		
		
	Developer :: Micro-service -- E_Commerce (payment_service)

		
		Development 
			--> Create Src Code --> perform unit testing	
		
				build -- compile the src code & Create artifacts --> Build appli. image

		Build_Server --> application build(artifacts) & Image Build(Docker Iamge)

		 	

		Test Environment 
			QA -- artifacts  -- tomcat / nginx
		
			UAT -- artifacts  -- tomcat / nginx		
		

		Deployed to PROD

		Non-Prod ::::

		Jenkins_Master :: --> Creating the jenkins projects & Schedule the projects in build servers / Nodes

			Slave1 - Build_Server --> application build(git,jdk,maven) && Image Build(Docker) App.Team1 -- Java
			Slave2 - Build_Server --> application build(git,jdk,maven) && Image Build(Docker) App.Team2 -- Python
			Slave3 - Build_Server --> application build(git,jdk,maven) && Image Build(Docker)

		Test_Server(QA/)


		Code is ready 

		Continuous Development 
			===> Create src code --> Push the src code to src_code Repo.(github)		

		Stages :::: Jenkins Pipeline 
		
			Stage1 --> SCM Checkout (Bring the scr code to Build_Server)
			Stage2 --> Build (Compile,Automated unit testing,create artifact - *.war)
			Stage3 --> Build Docker Image (docker build command with Dockerfile)
			Stage4 --> Publish Docker Image to Docker Registry

			Stage5 --> Deploy the Images from Docker Registry to any Target Environment
					QA/UAT/
					Docker Swarm
					Kubernetes Cluster

			Stage6 --> Monitoring the Applications/Infra.


		BUILD,TEST,PACKAGE,CODE_REVIEW,DEPLOY,MONITORING

		scm_checkout,code_review,build,unit_test,pkg,deploy,monitor

			DevOps -- Shift Left Approach 			





##################
14th May. - Day 4     
##################

		Stages :::: Jenkins Pipeline 
		
			Stage1 --> SCM Checkout (Bring the scr code to Build_Server)
			Stage2 --> Build (Compile,Automated unit testing,create artifact - *.war)
			Stage3 --> Build Docker Image (docker build command with Dockerfile)
			Stage4 --> Publish Docker Image to Docker Registry



		Steps to be performed :::

		- Infra-Structure :::

			Servers :::

				Jenkins_Master
				 Jenkins_Slave1
				
				QA_Server (Kubernetes)	


			Relicas of servers	

		Active & Passives
		
		Non-Prod 					Prod
		Jenkins(Passive)
		Jenkins_Master	(During Business hrs.)		Jenkins_Master
		 Jenkins_Slave1					
		 Jenkins_Slave2
		 Jenkins_Slave3
			
		Backup servers ==> 
		Snapshot of Jenkins_Master(Volume)

		Continuous Integration 
		Continuous Delivery.


			Servers :::

				Jenkins_Master		--> git, jdk, jenkins		port 8080 (Default)
				 Jenkins_Slave1		--> git, jdk, maven, docker

		Romote server access :::
		- 	Add User 
		- 	Create SSH Keys


		Config. Jenkins Node/Agent in Jenkins Master

		Config. Build Tools in Jenkins Master
			In Jenkins Global Tools Config.

		Create the ci/cd pipeline script

			Stages :::: Jenkins Pipeline 
		
				Stage1 --> SCM Checkout (Bring the scr code to Build_Server)
				Stage2 --> Build (Compile,Automated unit testing,create artifact - *.war)
				Stage3 --> Build Docker Image (docker build command with Dockerfile)
					Dockerfile 
					
				Stage4 --> Publish Docker Image to Docker Registry

						Docker Credentials -- Access token 

		Jenkins_Master --> Used to create jobs/pipeline & distribute/schedule the jobs to nodes.



			


Dockerfile ::

FROM tomcat:latest
COPY ./target/loksaieta.war /usr/local/tomcat/webapps




pipeline {
    agent { label 'javaslave1' }
	

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "mavenbs1"
    }

	environment {	
		DOCKERHUB_CREDENTIALS=credentials('dockerloginid')
	} 
    
    stages {
        stage('SCM Checkout') {
            steps {
                // Get some code from a GitHub repository
                //git 'https://github.com/LoksaiETA/devops-java-webapp.git'
                git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
		}
        stage('Maven Build') {
            steps {
                // Run Maven on a Unix agent.
                sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
		}

        stage("Docker build"){
            steps {
				sh 'docker version'
				sh "docker build -t loksaieta/loksai-eta-app:${BUILD_NUMBER} ."
				sh 'docker image list'
				sh "docker tag loksaieta/loksai-eta-app:${BUILD_NUMBER} loksaieta/loksai-eta-app:latest"
            }
        }
		stage('Login2DockerHub') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}
        stage('Approve - push Image to dockerhub'){
            steps{
                
                //----------------send an approval prompt-------------
                script {
                   env.APPROVED_DEPLOY = input message: 'User input required Choose "yes" | "Abort"'
                       }
                //-----------------end approval prompt------------
            }
        }
		stage('Push2DockerHub') {

			steps {
				sh "docker push loksaieta/loksai-eta-app:latest"
			}
		}
}
}




##################
20th May. - Day 5     
##################

		Dockerfile and instructions
		Docker Compose
		Docker Swarm 



		Create Docker Image :::

			docker commit --> 	using docker container ID.
			docker build --> 	using Dockerfile


		How to Write Dockerfile ::

		How the Images are created ???

		- Images are automatically create by using the instructions written in Dockerfile

		- Dockerfile is just a text file without any extension.

		- Docker Image composed of read-only layers which are defined by the instructions

FROM debian
RUN apt-get update
RUN apt-get install git -y


	Docker Build Workflow :::


		Dockerfile  	------------->	Docker Image	------------->	Docker Container
				    Build			      RUN



	Docker File Instructions:::

	FROM :: Identify the Base Image --> this base image will be pull from Docker hub.
			Eg.: FROM debian

	RUN  :: Create New Layer and execute any package
	
		Best Practises :::: Image build ::: 
		
FROM debian					1 + 1 --> 2 Layers
RUN apt-get update && apt-get install git -y


FROM debian			1 + 2 --> 3 Layers
RUN apt-get update
RUN apt-get install git -y

			
	EXPOSE :: Used to expose the ports

			-p <host_port>:<container_port>
			-p 8085:8080			tomcat
			-P 7000-8089:8080		tomcat 
			-p 8089:80			nginx
	
	COPY :: Used to Copy the files/Artifacts from Host Volume to Container Volume

Dockerfile ::

FROM tomcat:latest
COPY ./target/loksaieta.war /usr/local/tomcat/webapps

	ADD :: Used to copy the files from Host as well as from Web URL to Container Volume
		JFROG Artifactory
			loksaieta.war_SNAPSHOT_V1.0
			loksaieta.war_SNAPSHOT_V2.0	--> create Image --> published to Docker Hub.
		Az-Artifact

	CP  :: COPY the files with within the Container


	VOLUME :: It defines the dir. to identify the container volume. 
			VOLUME SRC=Edu-vol1,DEST=/Edu-vol1
	

		
		docker run -it --mount source=edutestvol1,destination=/edutestvol1 centos bash
		root@containter> ls
			/edutestvol1
			cd /edutestvol1
			ls 
			file1.txt
			exit
		root:ip-host> ./docker/volume/edutestvol1/_data/ ls
			file1.txt
	
	WORKDIR :: Defines the working dir.
	
		FROM tomcat:latest
		WORKDIR /var/lib/jenkins/workspace/jobname1/target
		COPY loksaieta.war /usr/local/tomcat/webapps

	ENV :: Is used to set some envi. varibles in container.
		ENV key value

	CMD :: It is used to run some command at runtime when the container get executed.

		FROM centos
		CMD ["echo" , "Hello"]
		
		docker run -it centos "echo HelloTeam"
		HelloTeam

	
		docker run -it centos bash
		docker run -it centos
		> ls 

		docker run centos sleep-50

	ENTRYPOINT :: It is used to run some command at runtime when the container get executed.
	
		FROM centos
		ENTRYPOINT ["echo" , "Welcome"] 
		CMD ["echo" , "Hello"]

		docker build -t centos1				// Create the image
		docker run -it centos1 "echo HelloWorld"	// Run the Container

		Welcome			// Output - 
		HelloWorld		//
	
		FROM centos
		ENTRYPOINT ["echo" , "Welcome"]

		docker build -t centos1				// Create the image

		docker run -it centos1 "echo HelloWorld"	// Run the Container

		Welcome
		RUN, CMD, ENTRYPOINT

		Dockerfile

		FROM centos
		MAINTAINER "loksai@asdf.com"
		ENTRYPOINT ["echo"]
		CMD ["Hello"]		

		docker build -t image1 .  // '.' This current dir. ==> is called as build context.

		docker run -it centos1 





		SDLC ::
		
			waterfall -- > AGile --> DevOps --> DevSecOps --> SRE --> GITOps --> AIOps
						  CI/CD


			Dev SErver --- Monitoring 


	Docker Compose ::: --> It is a Docker plugins used to run multiple containers as a service.

	Installation of Docker Compose --> If you are usig Windows/Mac --> Docker Compose comes by default in Docker Engine.
					   In Linux --> Install it explicitly. 

	
	Microservice Based Architecture ::::
	
	E_Commerce Portal :::

	3-Tier Architecture ==> Front-end,Appln. (Business Logic), Backend(Database)

	User_Registration	Developer1 --> Front-End ==> Container --> 3 -- ASP.NET(FrontEndDesign)
	User_Signin		
	Product_Search
	Add to cart
	Place Order
	Payment
	Track
	
	Monolith Application Architecture ::

	Containerization 


		run front_end		c1
		run app			c2
		run dbase		c3 SQLDB


	Container Orchestration Tools like :

		Docker Swarm
		Kubernetes
	
	
	1. Install Docker-Compose Plugins :::
		
	2. Create docker-compose.yaml ==> Manifest file --> Config. 

	3. Execute docker-compose.yaml file using Docker-compose CLI

		yaml scripts ===> key value pair.

	
DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
mkdir -p $DOCKER_CONFIG/cli-plugins
curl -SL https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
	
	
		
chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose

//sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose


		Create Payment - App. service --> 3 containers --> 



##################
21st May. - Day 6     
##################
		
	Docker Swarm & Services :::


	Container Orchestration ::::


	
	Target ==> 

		Test Environment				Prod. 
	Non-Prod 						Prod
	 DEV
	 Build
		Create image ==> publish to docker hub.
	 Test 
	   QA/UAT/
	    Pre-Prod/Staging					Prod


	What is availability of Target Servers ???

	What is the availability of Application Containers?

	How to Ensure the availability of Containers that are running my applications????

Web Application ==> prod envi. ===> Endusers access my appln. 

	E_Commerce Portal ===> 
	Online Resrvations ==> 

	5000 users ===> 50000 


	Do not rely on one container/server to deploy ur appln.

	*.war ==> create the replicas of my application Container & deploy in multiple taerget server.


	Container Orchestration Tool ::::

	Client Server Archi.

	Master & WorkerNodes ::::

	Master Node :: ==> Controllers ==> Swarm/K8s ==> Is to create Container services and schedule it to workernodes.

		WorkerNode1,2,3,4,5,6


	Swarm ::

		Containers	--> 
		Services 	


	What is Docker Swarm :::
		Is a Small-Scale Containerized Application Deployment and Management of Dockerized Application

	Features ::

		Very fast and Easy to setup Docker Swarm

		Deployment is very simple and fast
	
		Secured
		
		Automated Load Balancing ===>

			Controller Machine :		App_Container_v1.0 - 5 replicas --> auto scale --> 25 
							App_Container_v1.1 - 5 replicas --> auto scale --> 25 	
			Worker Node1,2,3,4,5

		High Scalability 

		Roll-Back Strategies :::
			Quickly and safely roll back to previous version.

		Deployment Strategy :::

			Roling upgrade
				deployment :::

		5 instance of containers --> 

			App_Container_v1.0	==> 1,2,3,4,5


			App_Container_v1.1 	==>

		centos / tomcat ===> hostmachine 

		Architecture of Docker Swarm :::


		Launch AWS Instances :::: 

			3 Instances for now . (1 + 2)

			Install Docker in all the nodes including worknodes.

			Initialize Docker Swarm in any one machine
			 2377	--> TCP port used to establish commn. between Master and Worknodes
			 7946	--> TCP/UDP for Overlay Network Node Discovery
			 4789	--> UDP for Overlay Network Traffic

			Attach the Worknodes to Docker Swarm Master

			Create Container Services & deploy the applications using Docker Swarm.


		Web Application Hosting ::

		urls --> DSN -->


		www.google.com
		facebook.com
		netflix.com
		amazon.com		100 of servers 

	
			Master -- Workers

     yum install docker -y
     systemctl start docker
     systemctl enable docker
     systemctl status docker

	Initilize Docker Swarm in Master Node:
	
	docker swarm init --advertise-addr <Master Machine IP_Address>

	docker swarm init --advertise-addr 172.31.11.55

	docker swarm join --token SWMTKN-1-5cvu162xkv3tsti372gtpe2yom19lbghj9c41kfnr9dgaz5hnu-es9i130vkhvlgpms4m5i9p8mm 172.31.11.55:2377

	docker service create --replicas 1 --name helloworld alpine ping docker.com
			

	docker run centos sleep 20







    docker service ls
    docker service inspect helloworld
    docker service inspect --pretty helloworld

    docker service ps helloworld

    docker ps 

    1  clear
    2  docker service ls
    3  docker service inspect helloworld
    4  docker service inspect --pretty helloworld
    5  histroy
    6  history
    7  docker service ls
    8  docker service ps helloworld
    9  clear
   10  docker service ps helloworld
   11  clear
   12  docker service ps helloworld
   13  docker ps
   14  docker service ps helloworld
   15  docker service ls
   16  docker service scale helloworld=5
   17  docker service ls
   18  docker service ps helloworld
   19  docker service scale helloworld=2
   20  docker service ps helloworld
   21  docker ps
   22  history

   30  clear
   31  docker service create --replicas 3 --name redis --update-delay 10s redis:3.0.6
   32  docker service ls
   33  docker service ps
   34  docker service ls
   35  docker service inspect --pretty redis
   36  clear
   37  docker service update --image redis:3.0.7 redis
   38  docker service inspect --pretty redis
   39  clear
   40  docker service ls
   41  docker service inspect --pretty redis
   42  clear
   43  history


	Create a container service --> perform upgrade ...  redis image -- 3.0 ==> 3 replicas --> 3.0.6





Summary :::
		Docker Build -- 
			Dockerfile Insttructions
		Docker Compose
		Docker Swarm













	Nodes are instance of Docker Engine :::

	Functions of Manager Node ::

		Responsible to maintain the cluster state 
		Scheduling the Container Services


	
docker swarm init --advertise-addr 172.31.9.142

docker swarm join --token SWMTKN-1-5cyx4n4opviq6n2znt0q4pt95l60aa3x2orti1m4mnke7tfqbs-9ozx4h2vlmjnl89q01s2sd3ep 172.31.9.142:2377

docker swarm join-token worker

docker swarm join --token

docker service create --replicas 1 --name helloworld alpine ping docker.com

docker service inspect --pretty helloworld

docker service inspect helloworld //json format


docker node update --availability drain ip-172-31-1-97.ap-south-1.compute.internal










docker service create \
  --replicas 3 \
  --name redis \
  --update-delay 10s \
  redis:3.0.6















https://docs.docker.com/compose/install/linux/


1. To download and install the Compose CLI plugin, run:


DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
mkdir -p $DOCKER_CONFIG/cli-plugins
curl -SL https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose

//This command downloads the latest release of Docker Compose (from the Compose releases repository) and installs Compose for the active user under $HOME directory.

//To install:

//Docker Compose for all users on your system, replace ~/.docker/cli-plugins with /usr/local/lib/docker/cli-plugins.
//A different version of Compose, substitute v2.18.1 with the version of Compose you want to use.
//For a different architecture, substitute x86_64 with the architecture you want.

//2. Apply executable permissions to the binary:

chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose

//or, if you chose to install Compose for all users:

sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose


3. Test the installation.

docker compose version




docker run loksaieta/loksai-eta-app
docker  run mongodb
docker run redis:alpine  docker run ansible

version: '3'
services:
  web:
    image: tomcat:8.0
    ports
  database:
   image: "mongodb"
  messaging:
   image: "redis:alpine"  
  orchestration:
   image: "ansible"









	







	
